<?php
/**
* Generated with protoc-gen-php8. DO NOT EDIT!
*/
{{if ne .Namespace ""}}namespace {{.Namespace}};{{end}}

{{range .Dependencies -}}
use {{.}};
{{end -}}
// @@protoc_insertion_point(message::use_scope)

{{if .IsDeprecated -}}
/**
* @deprecated Marked as deprecated in {{$.File.Name}}.
*/
{{- end}}
class {{.ClassName}} extends {{FQNBasename Opts.MessageParentClass}}
{
    // @@protoc_insertion_point(message::trait_scope)
{{range .Properties}}
    {{- if not .IsOneOf -}}
    {{- if .IsRepeated}}
    /**
    * @var {{.CommentPropertyType}}
    */
    {{- end}}
    protected {{if and (.IsObject) (not .IsEnum) (not .IsMap) (not .IsRepeated)}}?{{end}}{{.PropertyType}} ${{.PropertyName}}{{if not .IsPureEnum}} = {{.PropertyDefault}}{{end}};
    {{end -}}
{{end}}
    /**
    * @param null|array{
{{- range .Properties}}{{if not .IsOneOf}}
    *     {{.PropertyName}}: {{.CommentPropertyType}},
{{- end}}{{end}}
    * } $data
    */
    public function __construct(?array $data = null) {
        {{- range .Enums}}
        {{if not .IsOneOf -}}$this->{{.PropertyName}} = {{.PropertyType}}::from(0);{{end}}
        {{- end}}
        {{.Metadata.ClassName}}::initOnce();
        parent::__construct($data);
    }
{{range .Properties}}
    {{if and (not .IsMap) (not .IsRepeated) .IsWrapped}}
    /**
    {{- if .IsDeprecated}}
    * @deprecated Marked as deprecated in {{$.File.Name}}.
    {{- end}}
    * @return {{(.Dependency.FindProperty "value").PropertyType}}|null
    */
    public function get{{.AccessorName}}Unwrapped(): ?{{(.Dependency.FindProperty "value").PropertyType}} {
        return $this->readWrapperValue("{{.Name}}");
    }

    /**
    {{- if .IsDeprecated}}
    * @deprecated Marked as deprecated in {{$.File.Name}}.
    {{- end}}
    * @param {{(.Dependency.FindProperty "value").PropertyType}}|null $value
    * @return {{$.ClassName}}
    */
    public function set{{.AccessorName}}Unwrapped(?{{(.Dependency.FindProperty "value").PropertyType}} $value): {{$.ClassName}} {
        $this->writeWrapperValue("{{.Name}}", $value);
        return $this;
    }
    {{end}}
    /**
    {{- if .IsDeprecated}}
    * @deprecated Marked as deprecated in {{$.File.Name}}.
    {{- end}}
    * @return {{.CommentPropertyType}}
    */
    public function get{{.AccessorName}}(): {{.PropertyType}}{{if .IsPureEnum}}|int{{end}} {
        {{- if .IsPureEnum}}
        if ({{$.Metadata.ClassName}}::isCalledByProtobuf()) {
            return {{if .IsOneOf -}}
                (int)$this->readOneof({{.Number}});
            {{- else -}}
                $this->{{.PropertyName}}->value;
            {{- end}}
        }
        {{- end}}
        return {{if .IsOneOf -}}
            {{- if .IsEnum -}}
                {{.PropertyType}}::from((int)$this->readOneof({{.Number}}))
            {{- else -}}
                ({{.PropertyType}})$this->readOneof({{.Number}})
            {{- end -}}
        {{- else -}}
            $this->{{.PropertyName}}
        {{- end}};
    }
    {{if or (and .IsObject (not .IsEnum)) .IsOneOf}}
    /**
    {{- if .IsDeprecated}}
    * @deprecated Marked as deprecated in {{$.File.Name}}.
    {{- end}}
    * @return bool
    */
    public function has{{.AccessorName}}(): bool {
        {{if .IsOneOf -}}
            return $this->hasOneof({{.Number}});
        {{- else -}}
            return isset($this->{{.PropertyName}});
        {{- end}}
    }
    {{- end}}

    /**
    {{- if .IsDeprecated}}
    * @deprecated Marked as deprecated in {{$.File.Name}}.
    {{- end}}
    {{- if .IsRepeated}}
    * @throws \Exception
    {{- end}}
    * @param {{.CommentPropertyType}}{{if .IsPureEnum}}|int{{end}} $value
    * @return {{$.ClassName}}
    */
    public function set{{.AccessorName}}({{.PropertyType}}{{if .IsPureEnum}}|int{{end}} $value): {{$.ClassName}} {
        {{- if and (.IsRepeated) (not .IsMap)}}
        $value = GPBUtil::checkRepeatedField($value, GPBType::{{.ProtoType}}, {{.Type}}::class);
        {{- else if .IsMap}}
        $value = GPBUtil::checkMapField($value, GPBType::{{(.Dependency.FindProperty "key").ProtoType}}, GPBType::{{(.Dependency.FindProperty "value").ProtoType}}{{if (eq (.Dependency.FindProperty "value").ProtoType "MESSAGE")}}, {{.Type}}::class{{end}});
        {{- else if .IsPureEnum}}
        if (is_int($value)) {
            $value = {{.PropertyType}}::from($value);
        }
        {{- end}}
        {{if .IsOneOf -}}
            $this->writeOneof({{.Number}}, {{if .IsEnum}}$value->value{{else}}$value{{end}})
        {{- else -}}
            $this->{{.PropertyName}} = $value
        {{- end -}};

        return $this;
    }
{{end}}
{{- range .OneOfProperties}}
    public function get{{toCamel .}}(): string {
        return $this->whichOneof('{{.}}');
    }
{{end}}
    // @@protoc_insertion_point(message::class_scope)
}
